{"ast":null,"code":"import { setSkipAction } from './actions';\nimport { isDefined } from './isDefined';\nimport { $$addStore, $$deleteStore, $$updateStore } from './dispatchers';\nimport { __stores__ } from './stores';\nimport { capitalize } from './capitalize';\nimport { isNotBrowser } from './root';\nlet subs = [];\nexport function akitaDevtools(ngZoneOrOptions, options = {}) {\n  if (isNotBrowser) return;\n  if (!window.__REDUX_DEVTOOLS_EXTENSION__) {\n    return;\n  }\n  subs.length && subs.forEach(s => {\n    if (s.unsubscribe) {\n      s.unsubscribe();\n    } else {\n      s && s();\n    }\n  });\n  const isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];\n  if (!isAngular) {\n    ngZoneOrOptions = ngZoneOrOptions || {};\n    ngZoneOrOptions.run = cb => cb();\n    options = ngZoneOrOptions;\n  }\n  const defaultOptions = {\n    name: 'Akita',\n    shallow: true,\n    storesWhitelist: []\n  };\n  const merged = Object.assign({}, defaultOptions, options);\n  const storesWhitelist = merged.storesWhitelist;\n  const devTools = window.__REDUX_DEVTOOLS_EXTENSION__.connect(merged);\n  let appState = {};\n  const isAllowed = storeName => {\n    if (!storesWhitelist.length) {\n      return true;\n    }\n    return storesWhitelist.indexOf(storeName) > -1;\n  };\n  subs.push($$addStore.subscribe(storeName => {\n    if (isAllowed(storeName) === false) return;\n    appState = {\n      ...appState,\n      [storeName]: __stores__[storeName]._value()\n    };\n    devTools.send({\n      type: `[${capitalize(storeName)}] - @@INIT`\n    }, appState);\n  }));\n  subs.push($$deleteStore.subscribe(storeName => {\n    if (isAllowed(storeName) === false) return;\n    delete appState[storeName];\n    devTools.send({\n      type: `[${storeName}] - Delete Store`\n    }, appState);\n  }));\n  subs.push($$updateStore.subscribe(({\n    storeName,\n    action\n  }) => {\n    if (isAllowed(storeName) === false) return;\n    const {\n      type,\n      entityIds,\n      skip,\n      ...rest\n    } = action;\n    const payload = rest.payload;\n    if (skip) {\n      setSkipAction(false);\n      return;\n    }\n    const store = __stores__[storeName];\n    if (!store) {\n      return;\n    }\n    if (options.shallow === false && appState[storeName]) {\n      const isEqual = JSON.stringify(store._value()) === JSON.stringify(appState[storeName]);\n      if (isEqual) return;\n    }\n    appState = {\n      ...appState,\n      [storeName]: store._value()\n    };\n    const normalize = capitalize(storeName);\n    let msg = isDefined(entityIds) ? `[${normalize}] - ${type} (ids: ${entityIds})` : `[${normalize}] - ${type}`;\n    if (options.logTrace) {\n      console.group(msg);\n      console.trace();\n      console.groupEnd();\n    }\n    if (options.sortAlphabetically) {\n      const sortedAppState = Object.keys(appState).sort().reduce((acc, storeName) => {\n        acc[storeName] = appState[storeName];\n        return acc;\n      }, {});\n      devTools.send({\n        type: msg,\n        ...payload\n      }, sortedAppState);\n      return;\n    }\n    devTools.send({\n      type: msg,\n      ...payload\n    }, appState);\n  }));\n  subs.push(devTools.subscribe(message => {\n    if (message.type === 'DISPATCH') {\n      const payloadType = message.payload.type;\n      if (payloadType === 'COMMIT') {\n        devTools.init(appState);\n        return;\n      }\n      if (message.state) {\n        const rootState = JSON.parse(message.state);\n        for (let i = 0, keys = Object.keys(rootState); i < keys.length; i++) {\n          const storeName = keys[i];\n          if (__stores__[storeName]) {\n            ngZoneOrOptions.run(() => {\n              __stores__[storeName]._setState(() => rootState[storeName], false);\n            });\n          }\n        }\n      }\n    }\n  }));\n}\n//# sourceMappingURL=devtools.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}