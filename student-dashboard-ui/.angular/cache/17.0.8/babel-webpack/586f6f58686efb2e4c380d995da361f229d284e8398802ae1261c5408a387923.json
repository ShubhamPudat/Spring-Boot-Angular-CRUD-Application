{"ast":null,"code":"import { AkitaPlugin } from '../plugin';\nimport { debounceTime } from 'rxjs/operators';\nimport { getValue } from '../../getValueByString';\nimport { toBoolean } from '../../toBoolean';\nimport { isString } from '../../isString';\nimport { setValue } from '../../setValueByString';\nimport { logAction } from '../../actions';\nexport class PersistNgFormPlugin extends AkitaPlugin {\n  constructor(query, factoryFnOrPath, params = {}) {\n    super(query);\n    this.query = query;\n    this.factoryFnOrPath = factoryFnOrPath;\n    this.params = params;\n    this.params = {\n      ...{\n        debounceTime: 300,\n        formKey: 'akitaForm',\n        emitEvent: false,\n        arrControlFactory: v => this.builder.control(v)\n      },\n      ...params\n    };\n    this.isRootKeys = toBoolean(factoryFnOrPath) === false;\n    this.isKeyBased = isString(factoryFnOrPath) || this.isRootKeys;\n  }\n  setForm(form, builder) {\n    this.form = form;\n    this.builder = builder;\n    this.activate();\n    return this;\n  }\n  reset(initialState) {\n    let value;\n    if (initialState) {\n      value = initialState;\n    } else {\n      value = this.isKeyBased ? this.initialValue : this.factoryFnOrPath();\n    }\n    if (this.isKeyBased) {\n      Object.keys(this.initialValue).forEach(stateKey => {\n        const value = this.initialValue[stateKey];\n        if (Array.isArray(value) && this.builder) {\n          const formArray = this.form.controls[stateKey];\n          this.cleanArray(formArray);\n          value.forEach((v, i) => {\n            this.form.get(stateKey).insert(i, this.params.arrControlFactory(v));\n          });\n        }\n      });\n    }\n    this.form.patchValue(value, {\n      emitEvent: this.params.emitEvent\n    });\n    const storeValue = this.isKeyBased ? setValue(this.getQuery().getValue(), `${this.getStore().storeName}.${this.factoryFnOrPath}`, value) : {\n      [this.params.formKey]: value\n    };\n    this.updateStore(storeValue);\n  }\n  cleanArray(control) {\n    while (control.length !== 0) {\n      control.removeAt(0);\n    }\n  }\n  resolveInitialValue(formValue, root) {\n    if (!formValue) return;\n    return Object.keys(formValue).reduce((acc, stateKey) => {\n      const value = root[stateKey];\n      if (Array.isArray(value) && this.builder) {\n        const factory = this.params.arrControlFactory;\n        this.cleanArray(this.form.get(stateKey));\n        value.forEach((v, i) => {\n          this.form.get(stateKey).insert(i, factory(v));\n        });\n      }\n      acc[stateKey] = root[stateKey];\n      return acc;\n    }, {});\n  }\n  activate() {\n    let path;\n    if (this.isKeyBased) {\n      if (this.isRootKeys) {\n        this.initialValue = this.resolveInitialValue(this.form.value, this.getQuery().getValue());\n        this.form.patchValue(this.initialValue, {\n          emitEvent: this.params.emitEvent\n        });\n      } else {\n        path = `${this.getStore().storeName}.${this.factoryFnOrPath}`;\n        const root = getValue(this.getQuery().getValue(), path);\n        this.initialValue = this.resolveInitialValue(root, root);\n        this.form.patchValue(this.initialValue, {\n          emitEvent: this.params.emitEvent\n        });\n      }\n    } else {\n      if (!this.getQuery().getValue()[this.params.formKey]) {\n        logAction('@PersistNgFormPlugin activate');\n        this.updateStore({\n          [this.params.formKey]: this.factoryFnOrPath()\n        });\n      }\n      const value = this.getQuery().getValue()[this.params.formKey];\n      this.form.patchValue(value);\n    }\n    this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe(value => {\n      logAction('@PersistForm - Update');\n      let newState;\n      if (this.isKeyBased) {\n        if (this.isRootKeys) {\n          newState = state => ({\n            ...state,\n            ...value\n          });\n        } else {\n          newState = state => setValue(state, path, value);\n        }\n      } else {\n        newState = () => ({\n          [this.params.formKey]: value\n        });\n      }\n      this.updateStore(newState(this.getQuery().getValue()));\n    });\n  }\n  destroy() {\n    this.formChanges && this.formChanges.unsubscribe();\n    this.form = null;\n    this.builder = null;\n  }\n}\n//# sourceMappingURL=persistNgFormPlugin.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}