{"ast":null,"code":"import { coerceArray } from './coerceArray';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { isFunction } from './isFunction';\nimport { isObject } from './isObject';\n/**\n * Update item in a collection\n *\n * @example\n *\n *\n * store.update(1, entity => ({\n *   comments: arrayUpdate(entity.comments, 1, { name: 'newComment' })\n * }))\n */\nexport function arrayUpdate(arr, predicateOrIds, obj, idKey = DEFAULT_ID_KEY) {\n  let condition;\n  if (isFunction(predicateOrIds)) {\n    condition = predicateOrIds;\n  } else {\n    const ids = coerceArray(predicateOrIds);\n    condition = item => ids.includes(isObject(item) ? item[idKey] : item) === true;\n  }\n  const updateFn = state => state.map((entity, index) => {\n    if (condition(entity, index) === true) {\n      return isObject(entity) ? {\n        ...entity,\n        ...obj\n      } : obj;\n    }\n    return entity;\n  });\n  return updateFn(arr);\n}\n//# sourceMappingURL=arrayUpdate.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}