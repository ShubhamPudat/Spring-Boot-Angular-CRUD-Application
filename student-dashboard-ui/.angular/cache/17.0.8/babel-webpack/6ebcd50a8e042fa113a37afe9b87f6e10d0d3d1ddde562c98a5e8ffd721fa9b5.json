{"ast":null,"code":"import { of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { distinctUntilArrayItemChanged } from './arrayFind';\nimport { coerceArray } from './coerceArray';\nimport { entitiesToArray } from './entitiesToArray';\nimport { entitiesToMap } from './entitiesToMap';\nimport { findEntityByPredicate, getEntity } from './getEntity';\nimport { isArray } from './isArray';\nimport { isDefined } from './isDefined';\nimport { isFunction } from './isFunction';\nimport { isNil } from './isNil';\nimport { mapSkipUndefined } from './mapSkipUndefined';\nimport { Query } from './query';\nimport { sortByOptions } from './sortByOptions';\nimport { toBoolean } from './toBoolean';\n/**\n *\n *  The Entity Query is similar to the general Query, with additional functionality tailored for EntityStores.\n *\n *  class WidgetsQuery extends QueryEntity<WidgetsState> {\n *     constructor(protected store: WidgetsStore) {\n *       super(store);\n *     }\n *  }\n *\n *\n *\n */\nexport class QueryEntity extends Query {\n  constructor(store, options = {}) {\n    super(store);\n    this.options = options;\n    this.__store__ = store;\n  }\n  selectAll(options = {\n    asObject: false\n  }) {\n    return this.select(state => state.entities).pipe(map(() => this.getAll(options)));\n  }\n  getAll(options = {\n    asObject: false,\n    filterBy: undefined,\n    limitTo: undefined\n  }) {\n    if (options.asObject) {\n      return entitiesToMap(this.getValue(), options);\n    }\n    sortByOptions(options, this.config || this.options);\n    return entitiesToArray(this.getValue(), options);\n  }\n  selectMany(ids, project) {\n    if (!ids || !ids.length) return of([]);\n    return this.select(state => state.entities).pipe(map(entities => mapSkipUndefined(ids, id => getEntity(id, project)(entities))), distinctUntilArrayItemChanged());\n  }\n  selectEntity(idOrPredicate, project) {\n    let id = idOrPredicate;\n    if (isFunction(idOrPredicate)) {\n      // For performance reason we expect the entity to be in the store\n      id = findEntityByPredicate(idOrPredicate, this.getValue().entities);\n    }\n    return this.select(state => state.entities).pipe(map(getEntity(id, project)), distinctUntilChanged());\n  }\n  /**\n   * Get an entity by id\n   *\n   * @example\n   *\n   * this.query.getEntity(1);\n   */\n  getEntity(id) {\n    return this.getValue().entities[id];\n  }\n  /**\n   * Select the active entity's id\n   *\n   * @example\n   *\n   * this.query.selectActiveId()\n   */\n  selectActiveId() {\n    return this.select(state => state.active);\n  }\n  /**\n   * Get the active id\n   *\n   * @example\n   *\n   * this.query.getActiveId()\n   */\n  getActiveId() {\n    return this.getValue().active;\n  }\n  selectActive(project) {\n    if (isArray(this.getActive())) {\n      return this.selectActiveId().pipe(switchMap(ids => this.selectMany(ids, project)));\n    }\n    return this.selectActiveId().pipe(switchMap(ids => this.selectEntity(ids, project)));\n  }\n  getActive() {\n    const activeId = this.getActiveId();\n    if (isArray(activeId)) {\n      return activeId.map(id => this.getValue().entities[id]);\n    }\n    return toBoolean(activeId) ? this.getEntity(activeId) : undefined;\n  }\n  /**\n   * Select the store's entity collection length\n   *\n   * @example\n   *\n   * this.query.selectCount()\n   * this.query.selectCount(entity => entity.completed)\n   */\n  selectCount(predicate) {\n    return this.select(state => state.entities).pipe(map(() => this.getCount(predicate)));\n  }\n  /**\n   * Get the store's entity collection length\n   *\n   * @example\n   *\n   * this.query.getCount()\n   * this.query.getCount(entity => entity.completed)\n   */\n  getCount(predicate) {\n    if (isFunction(predicate)) {\n      return this.getAll().filter(predicate).length;\n    }\n    return this.getValue().ids.length;\n  }\n  selectLast(project) {\n    return this.selectAt(ids => ids[ids.length - 1], project);\n  }\n  selectFirst(project) {\n    return this.selectAt(ids => ids[0], project);\n  }\n  selectEntityAction(actionOrActions) {\n    if (isNil(actionOrActions)) {\n      return this.store.selectEntityAction$;\n    }\n    const project = isArray(actionOrActions) ? action => action : ({\n      ids\n    }) => ids;\n    const actions = coerceArray(actionOrActions);\n    return this.store.selectEntityAction$.pipe(filter(({\n      type\n    }) => actions.includes(type)), map(action => project(action)));\n  }\n  hasEntity(projectOrIds) {\n    if (isNil(projectOrIds)) {\n      return this.getValue().ids.length > 0;\n    }\n    if (isFunction(projectOrIds)) {\n      return this.getAll().some(projectOrIds);\n    }\n    if (isArray(projectOrIds)) {\n      return projectOrIds.every(id => id in this.getValue().entities);\n    }\n    return projectOrIds in this.getValue().entities;\n  }\n  /**\n   * Returns whether entity store has an active entity\n   *\n   * @example\n   *\n   * this.query.hasActive()\n   * this.query.hasActive(3)\n   *\n   */\n  hasActive(id) {\n    const active = this.getValue().active;\n    const isIdProvided = isDefined(id);\n    if (Array.isArray(active)) {\n      if (isIdProvided) {\n        return active.includes(id);\n      }\n      return active.length > 0;\n    }\n    return isIdProvided ? active === id : isDefined(active);\n  }\n  /**\n   *\n   * Create sub UI query for querying Entity's UI state\n   *\n   * @example\n   *\n   *\n   * export class ProductsQuery extends QueryEntity<ProductsState> {\n   *   ui: EntityUIQuery<ProductsUIState>;\n   *\n   *   constructor(protected store: ProductsStore) {\n   *     super(store);\n   *     this.createUIQuery();\n   *   }\n   *\n   * }\n   */\n  createUIQuery() {\n    this.ui = new EntityUIQuery(this.__store__.ui);\n  }\n  selectAt(mapFn, project) {\n    return this.select(state => state.ids).pipe(map(mapFn), distinctUntilChanged(), switchMap(id => this.selectEntity(id, project)));\n  }\n}\n// @internal\nexport class EntityUIQuery extends QueryEntity {\n  constructor(store) {\n    super(store);\n  }\n}\n//# sourceMappingURL=queryEntity.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}