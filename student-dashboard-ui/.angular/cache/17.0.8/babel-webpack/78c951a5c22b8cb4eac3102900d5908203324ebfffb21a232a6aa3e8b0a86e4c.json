{"ast":null,"code":"import { queryConfigKey } from './queryConfig';\nimport { isString } from './isString';\nimport { isFunction } from './isFunction';\nimport { isDev } from './env';\nimport { __queries__ } from './stores';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { compareKeys } from './compareKeys';\nexport class Query {\n  constructor(store) {\n    this.store = store;\n    this.__store__ = store;\n    if (isDev()) {\n      // @internal\n      __queries__[store.storeName] = this;\n    }\n  }\n  select(project) {\n    let mapFn;\n    if (isFunction(project)) {\n      mapFn = project;\n    } else if (isString(project)) {\n      mapFn = state => state[project];\n    } else if (Array.isArray(project)) {\n      return this.store._select(state => state).pipe(distinctUntilChanged(compareKeys(project)), map(state => {\n        if (isFunction(project[0])) {\n          return project.map(func => func(state));\n        }\n        return project.reduce((acc, k) => {\n          acc[k] = state[k];\n          return acc;\n        }, {});\n      }));\n    } else {\n      mapFn = state => state;\n    }\n    return this.store._select(mapFn);\n  }\n  /**\n   * Select the loading state\n   *\n   * @example\n   *\n   * this.query.selectLoading().subscribe(isLoading => {})\n   */\n  selectLoading() {\n    return this.select(state => state.loading);\n  }\n  /**\n   * Select the error state\n   *\n   * @example\n   *\n   * this.query.selectError().subscribe(error => {})\n   */\n  selectError() {\n    return this.select(state => state.error);\n  }\n  /**\n   * Get the store's value\n   *\n   * @example\n   *\n   * this.query.getValue()\n   *\n   */\n  getValue() {\n    return this.store._value();\n  }\n  /**\n   * Select the cache state\n   *\n   * @example\n   *\n   * this.query.selectHasCache().pipe(\n   *   switchMap(hasCache => {\n   *     return hasCache ? of() : http().pipe(res => store.set(res))\n   *   })\n   * )\n   */\n  selectHasCache() {\n    return this.store._cache().asObservable();\n  }\n  /**\n   * Whether we've cached data\n   *\n   * @example\n   *\n   * this.query.getHasCache()\n   *\n   */\n  getHasCache() {\n    return this.store._cache().value;\n  }\n  // @internal\n  get config() {\n    return this.constructor[queryConfigKey];\n  }\n}\n//# sourceMappingURL=query.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}