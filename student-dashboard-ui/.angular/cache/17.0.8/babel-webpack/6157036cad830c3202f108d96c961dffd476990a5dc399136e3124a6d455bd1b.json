{"ast":null,"code":"import { AkitaError } from './errors';\nimport { isNil } from './isNil';\nimport { configKey } from './storeConfig';\nimport { __stores__ } from './stores';\nexport var StoreAction = /*#__PURE__*/function (StoreAction) {\n  StoreAction[\"Update\"] = \"UPDATE\";\n  return StoreAction;\n}(StoreAction || {});\nconst StoreActionMapping = {\n  [StoreAction.Update]: 'update'\n};\nexport var EntityStoreAction = /*#__PURE__*/function (EntityStoreAction) {\n  EntityStoreAction[\"Update\"] = \"UPDATE\";\n  EntityStoreAction[\"AddEntities\"] = \"ADD_ENTITIES\";\n  EntityStoreAction[\"SetEntities\"] = \"SET_ENTITIES\";\n  EntityStoreAction[\"UpdateEntities\"] = \"UPDATE_ENTITIES\";\n  EntityStoreAction[\"RemoveEntities\"] = \"REMOVE_ENTITIES\";\n  EntityStoreAction[\"UpsertEntities\"] = \"UPSERT_ENTITIES\";\n  EntityStoreAction[\"UpsertManyEntities\"] = \"UPSERT_MANY_ENTITIES\";\n  return EntityStoreAction;\n}(EntityStoreAction || {});\nconst EntityStoreActionMapping = {\n  [EntityStoreAction.Update]: 'update',\n  [EntityStoreAction.AddEntities]: 'add',\n  [EntityStoreAction.SetEntities]: 'set',\n  [EntityStoreAction.UpdateEntities]: 'update',\n  [EntityStoreAction.RemoveEntities]: 'remove',\n  [EntityStoreAction.UpsertEntities]: 'upsert',\n  [EntityStoreAction.UpsertManyEntities]: 'upsertMany'\n};\n/**\n * Get a {@link Store} from the global store registry.\n * @param storeClass The {@link Store} class of the instance to be returned.\n */\nexport function getStore(storeClass) {\n  return getStoreByName(storeClass[configKey]['storeName']);\n}\n/**\n * Get a {@link Store} from the global store registry.\n * @param storeName The {@link Store} name of the instance to be returned.\n */\nexport function getStoreByName(storeName) {\n  const store = __stores__[storeName];\n  if (isNil(store)) {\n    throw new AkitaError(`${store.storeName} doesn't exist`);\n  }\n  return store;\n}\n/**\n * Get a {@link EntityStore} from the global store registry.\n * @param storeClass The {@link EntityStore} class of the instance to be returned.\n */\nexport function getEntityStore(storeClass) {\n  return getStore(storeClass);\n}\n/**\n * Get a {@link EntityStore} from the global store registry.\n * @param storeName The {@link EntityStore} name of the instance to be returned.\n */\nexport function getEntityStoreByName(storeName) {\n  return getStoreByName(storeName);\n}\nexport function runStoreAction(storeClassOrName, action, operation) {\n  const store = typeof storeClassOrName === 'string' ? getStoreByName(storeClassOrName) : getStore(storeClassOrName);\n  operation(store[StoreActionMapping[action]].bind(store));\n}\nexport function runEntityStoreAction(storeClassOrName, action, operation) {\n  const store = typeof storeClassOrName === 'string' ? getEntityStoreByName(storeClassOrName) : getEntityStore(storeClassOrName);\n  operation(store[EntityStoreActionMapping[action]].bind(store));\n}\n//# sourceMappingURL=runStoreAction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}