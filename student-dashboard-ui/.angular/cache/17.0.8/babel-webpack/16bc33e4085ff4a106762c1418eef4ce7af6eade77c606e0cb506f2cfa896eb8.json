{"ast":null,"code":"import { isUndefined } from '../isUndefined';\nimport { coerceArray } from '../coerceArray';\nimport { toBoolean } from '../toBoolean';\nimport { isFunction } from '../isFunction';\n/**\n * Each plugin that wants to add support for entities should extend this interface.\n */\nexport class EntityCollectionPlugin {\n  constructor(query, entityIds) {\n    this.query = query;\n    this.entityIds = entityIds;\n    this.entities = new Map();\n  }\n  /**\n   * Get the entity plugin instance.\n   */\n  getEntity(id) {\n    return this.entities.get(id);\n  }\n  /**\n   * Whether the entity plugin exist.\n   */\n  hasEntity(id) {\n    return this.entities.has(id);\n  }\n  /**\n   * Remove the entity plugin instance.\n   */\n  removeEntity(id) {\n    this.destroy(id);\n    return this.entities.delete(id);\n  }\n  /**\n   * Set the entity plugin instance.\n   */\n  createEntity(id, plugin) {\n    return this.entities.set(id, plugin);\n  }\n  /**\n   * If the user passes `entityIds` we take them; otherwise, we take all.\n   */\n  getIds() {\n    return isUndefined(this.entityIds) ? this.query.getValue().ids : coerceArray(this.entityIds);\n  }\n  /**\n   * When you call one of the plugin methods, you can pass id/ids or undefined which means all.\n   */\n  resolvedIds(ids) {\n    return isUndefined(ids) ? this.getIds() : coerceArray(ids);\n  }\n  /**\n   * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.\n   *\n   * For example in your plugin you may do the following:\n   *\n   * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));\n   */\n  rebase(ids, actions = {}) {\n    /**\n     *\n     * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.\n     *\n     * This phase will be called only upon update.\n     */\n    if (toBoolean(ids)) {\n      /**\n       * Which means all\n       */\n      if (isUndefined(this.entityIds)) {\n        for (let i = 0, len = ids.length; i < len; i++) {\n          const entityId = ids[i];\n          if (this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          }\n        }\n        this.entities.forEach((plugin, entityId) => {\n          if (ids.indexOf(entityId) === -1) {\n            isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n            this.removeEntity(entityId);\n          }\n        });\n      } else {\n        /**\n         * Which means the user passes specific ids\n         */\n        const _ids = coerceArray(this.entityIds);\n        for (let i = 0, len = _ids.length; i < len; i++) {\n          const entityId = _ids[i];\n          /** The Entity in current ids and doesn't exist, add it. */\n          if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          } else {\n            this.entities.forEach((plugin, entityId) => {\n              /** The Entity not in current ids and exists, remove it. */\n              if (ids.indexOf(entityId) === -1 && this.hasEntity(entityId) === true) {\n                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n                this.removeEntity(entityId);\n              }\n            });\n          }\n        }\n      }\n    } else {\n      /**\n       * Otherwise, start with the provided ids or all.\n       */\n      this.getIds().forEach(id => {\n        if (!this.hasEntity(id)) this.createEntity(id, this.instantiatePlugin(id));\n      });\n    }\n  }\n  /**\n   * Listen for add/remove entities.\n   */\n  selectIds() {\n    return this.query.select(state => state.ids);\n  }\n  /**\n   * Base method for activation, you can override it if you need to.\n   */\n  activate(ids) {\n    this.rebase(ids);\n  }\n  /**\n   * Loop over each id and invoke the plugin method.\n   */\n  forEachId(ids, cb) {\n    const _ids = this.resolvedIds(ids);\n    for (let i = 0, len = _ids.length; i < len; i++) {\n      const id = _ids[i];\n      if (this.hasEntity(id)) {\n        cb(this.getEntity(id));\n      }\n    }\n  }\n}\n//# sourceMappingURL=entityCollectionPlugin.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}