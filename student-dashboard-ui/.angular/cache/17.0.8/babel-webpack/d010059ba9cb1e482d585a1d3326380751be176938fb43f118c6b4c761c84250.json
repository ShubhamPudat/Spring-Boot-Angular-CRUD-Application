{"ast":null,"code":"import { StateHistoryPlugin } from './stateHistoryPlugin';\nimport { toBoolean } from '../../toBoolean';\nimport { skip } from 'rxjs/operators';\nimport { EntityCollectionPlugin } from '../entityCollectionPlugin';\nexport class EntityStateHistoryPlugin extends EntityCollectionPlugin {\n  constructor(query, params = {}) {\n    super(query, params.entityIds);\n    this.query = query;\n    this.params = params;\n    params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;\n    this.activate();\n    this.selectIds().pipe(skip(1)).subscribe(ids => this.activate(ids));\n  }\n  redo(ids) {\n    this.forEachId(ids, e => e.redo());\n  }\n  undo(ids) {\n    this.forEachId(ids, e => e.undo());\n  }\n  hasPast(id) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasPast;\n    }\n  }\n  hasFuture(id) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasFuture;\n    }\n  }\n  jumpToFuture(ids, index) {\n    this.forEachId(ids, e => e.jumpToFuture(index));\n  }\n  jumpToPast(ids, index) {\n    this.forEachId(ids, e => e.jumpToPast(index));\n  }\n  clear(ids, customUpdateFn) {\n    this.forEachId(ids, e => e.clear(customUpdateFn));\n  }\n  destroy(ids, clearHistory = false) {\n    this.forEachId(ids, e => e.destroy(clearHistory));\n  }\n  ignoreNext(ids) {\n    this.forEachId(ids, e => e.ignoreNext());\n  }\n  instantiatePlugin(id) {\n    return new StateHistoryPlugin(this.query, this.params, id);\n  }\n}\n//# sourceMappingURL=entityStateHistoryPlugin.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}