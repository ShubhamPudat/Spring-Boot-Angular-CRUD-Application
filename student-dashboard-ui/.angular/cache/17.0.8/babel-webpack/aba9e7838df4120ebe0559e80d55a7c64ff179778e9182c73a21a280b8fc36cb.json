{"ast":null,"code":"import { distinctUntilChanged, map } from 'rxjs/operators';\nimport { coerceArray } from './coerceArray';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { isArray } from './isArray';\nimport { isEmpty } from './isEmpty';\nimport { isFunction } from './isFunction';\n// @internal\nexport function find(collection, idsOrPredicate, idKey) {\n  const result = [];\n  if (isFunction(idsOrPredicate)) {\n    for (const entity of collection) {\n      if (idsOrPredicate(entity) === true) {\n        result.push(entity);\n      }\n    }\n  } else {\n    const toSet = coerceArray(idsOrPredicate).reduce((acc, current) => acc.add(current), new Set());\n    for (const entity of collection) {\n      if (toSet.has(entity[idKey])) {\n        result.push(entity);\n      }\n    }\n  }\n  return result;\n}\n// @internal\nexport function distinctUntilArrayItemChanged() {\n  return distinctUntilChanged((prevCollection, currentCollection) => {\n    if (prevCollection === currentCollection) {\n      return true;\n    }\n    if (!isArray(prevCollection) || !isArray(currentCollection)) {\n      return false;\n    }\n    if (isEmpty(prevCollection) && isEmpty(currentCollection)) {\n      return true;\n    }\n    if (prevCollection.length !== currentCollection.length) {\n      return false;\n    }\n    const isOneOfItemReferenceChanged = currentCollection.some((item, i) => {\n      return prevCollection[i] !== item;\n    });\n    // return false means there is a change and we want to call next()\n    return isOneOfItemReferenceChanged === false;\n  });\n}\nexport function arrayFind(idsOrPredicate, idKey) {\n  return function (source) {\n    return source.pipe(map(collection => {\n      // which means the user deleted the root entity or set the collection to nil\n      if (isArray(collection) === false) {\n        return collection;\n      }\n      return find(collection, idsOrPredicate, idKey || DEFAULT_ID_KEY);\n    }), distinctUntilArrayItemChanged(), map(value => {\n      if (isArray(value) === false) {\n        return value;\n      }\n      if (isArray(idsOrPredicate) || isFunction(idsOrPredicate)) {\n        return value;\n      }\n      return value[0];\n    }));\n  };\n}\n//# sourceMappingURL=arrayFind.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}