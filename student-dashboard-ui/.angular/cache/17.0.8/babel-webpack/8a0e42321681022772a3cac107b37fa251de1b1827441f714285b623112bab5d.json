{"ast":null,"code":"import { filterNilValue } from '../filterNil';\nimport { toBoolean } from '../toBoolean';\nimport { getAkitaConfig } from '../config';\nimport { getValue } from '../getValueByString';\nimport { setValue } from '../setValueByString';\nexport class AkitaPlugin {\n  constructor(query, config) {\n    this.query = query;\n    if (config && config.resetFn) {\n      if (getAkitaConfig().resettable) {\n        this.onReset(config.resetFn);\n      }\n    }\n  }\n  /** This method is responsible for getting access to the query. */\n  getQuery() {\n    return this.query;\n  }\n  /** This method is responsible for getting access to the store. */\n  getStore() {\n    return this.getQuery().__store__;\n  }\n  /** This method is responsible tells whether the plugin is entityBased or not.  */\n  isEntityBased(entityId) {\n    return toBoolean(entityId);\n  }\n  /** This method is responsible for selecting the source; it can be the whole store or one entity. */\n  selectSource(entityId, property) {\n    if (this.isEntityBased(entityId)) {\n      return this.getQuery().selectEntity(entityId).pipe(filterNilValue());\n    }\n    if (property) {\n      return this.getQuery().select(state => getValue(state, this.withStoreName(property)));\n    }\n    return this.getQuery().select();\n  }\n  getSource(entityId, property) {\n    if (this.isEntityBased(entityId)) {\n      return this.getQuery().getEntity(entityId);\n    }\n    const state = this.getQuery().getValue();\n    if (property) {\n      return getValue(state, this.withStoreName(property));\n    }\n    return state;\n  }\n  withStoreName(prop) {\n    return `${this.storeName}.${prop}`;\n  }\n  get storeName() {\n    return this.getStore().storeName;\n  }\n  /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */\n  updateStore(newState, entityId, property, replace = false) {\n    if (this.isEntityBased(entityId)) {\n      const store = this.getStore();\n      replace ? store.replace(entityId, newState) : store.update(entityId, newState);\n    } else {\n      if (property) {\n        this.getStore()._setState(state => {\n          return setValue(state, this.withStoreName(property), newState, true);\n        });\n        return;\n      }\n      const nextState = replace ? newState : state => ({\n        ...state,\n        ...newState\n      });\n      this.getStore()._setState(nextState);\n    }\n  }\n  /**\n   * Function to invoke upon reset\n   */\n  onReset(fn) {\n    const original = this.getStore().reset;\n    this.getStore().reset = (...params) => {\n      /** It should run after the plugin destroy method */\n      setTimeout(() => {\n        original.apply(this.getStore(), params);\n        fn();\n      });\n    };\n  }\n}\n//# sourceMappingURL=plugin.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}